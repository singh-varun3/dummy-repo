/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.Manufacture;

import Business.Business;
import Business.NationalEnterprise.Manufacturer;
import Business.Order.OrderItem;
import Business.Organization.DistributorOrganization;
import Business.Organization.ManufactureOrganization;
import Business.Organization.Organization;
import Business.Vaccine.VaccineProduct;
import Business.WorkQueue.VaccineOrderWorkRequest;
import java.awt.CardLayout;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Vaibhav
 */
public class ProcessOrdersJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ProcessOrdersJPanel
     */
    private JPanel workContainer;
    private VaccineOrderWorkRequest vaccineWorkRequest;
    private Manufacturer manufacturer;
    private Business business;

    public ProcessOrdersJPanel(JPanel workContainer, VaccineOrderWorkRequest vaccineWorkRequest, Manufacturer manufacturer, Business business) {
        initComponents();
        this.workContainer = workContainer;
        this.vaccineWorkRequest = vaccineWorkRequest;
        this.manufacturer = manufacturer;
        this.business = business;
        orderNumberjTextField.setText(String.valueOf(vaccineWorkRequest.getVaccineOrder().getOrderNumber()));
        populateTable();
        calculateTotalAmount();

    }

    private void populateTable() {

        DefaultTableModel model = (DefaultTableModel) orderParticularsjTable.getModel();

        model.setRowCount(0);

        for (OrderItem orderItem : vaccineWorkRequest.getVaccineOrder().getOrderList()) {
            Object[] row = new Object[4];
            row[0] = orderItem.getVaccineProduct().getVaccineDefinition().getVaccineCode();
            row[1] = orderItem.getVaccineProduct().getVaccineDefinition().getVaccineName();
            row[2] = orderItem.getQuantity();
            row[3] = orderItem.getVaccineProduct().getVaccinePrice() * orderItem.getQuantity();

            model.addRow(row);
        }
    }

    private void calculateTotalAmount() {

        double totalAmount = 0;
        for (OrderItem orderItem : vaccineWorkRequest.getVaccineOrder().getOrderList()) {
            totalAmount = totalAmount + (orderItem.getVaccineProduct().getVaccinePrice() * orderItem.getQuantity());
        }

        totalAmountjTextField.setText(String.valueOf(totalAmount));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        orderParticularsjTable = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        orderNumberjTextField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        totalAmountjTextField = new javax.swing.JTextField();
        shipOrderjButton = new javax.swing.JButton();
        backJButton2 = new javax.swing.JButton();

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Process Orders");

        jLabel2.setText("Particulars:");

        orderParticularsjTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Vaccine Code", "Vaccine Name", "Quantity", "Total Amount"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        orderParticularsjTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(orderParticularsjTable);
        if (orderParticularsjTable.getColumnModel().getColumnCount() > 0) {
            orderParticularsjTable.getColumnModel().getColumn(2).setResizable(false);
            orderParticularsjTable.getColumnModel().getColumn(3).setResizable(false);
        }

        jLabel3.setText("Order Number:");

        orderNumberjTextField.setEnabled(false);

        jLabel4.setText("Total Amount of Order: ");

        totalAmountjTextField.setEnabled(false);

        shipOrderjButton.setText("Ship Order");
        shipOrderjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shipOrderjButtonActionPerformed(evt);
            }
        });

        backJButton2.setText("<< Back");
        backJButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(shipOrderjButton, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(orderNumberjTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(totalAmountjTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(backJButton2))
                        .addGap(0, 165, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(orderNumberjTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(totalAmountjTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(shipOrderjButton)
                .addGap(18, 18, 18)
                .addComponent(backJButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void backJButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButton2ActionPerformed
        // TODO add your handling code here:
        workContainer.remove(this);
        CardLayout layout = (CardLayout) workContainer.getLayout();
        layout.previous(workContainer);
    }//GEN-LAST:event_backJButton2ActionPerformed

    private void shipOrderjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shipOrderjButtonActionPerformed
        // TODO add your handling code here:
        if(vaccineWorkRequest.getStatus().equalsIgnoreCase("Shipped") || vaccineWorkRequest.getStatus().equalsIgnoreCase("Stored"))
         {
             JOptionPane.showMessageDialog(null, "Order already shipped!");
             return;
         }
        
/*
//get the quantity
        for (OrderItem orderItem : vaccineWorkRequest.getVaccineOrder().getOrderList()) {
            VaccineProduct prod = orderItem.getVaccineProduct();
            

            // check if quantity is available
            ManufactureOrganization manufacureOrg = null;
            for (Organization org : manufacturer.getOrganizationDirectory().getOrganizationList()) {
                if (org instanceof ManufactureOrganization) {
                    manufacureOrg = (ManufactureOrganization) org;
                    for (VaccineProduct vaccine : manufacureOrg.getVaccineProductCatalog().getVaccineProductList()) {
                        if (vaccine.getAvailablity() < orderItem.getQuantity()) {
                            JOptionPane.showMessageDialog(null, "Insufficient Quantity of Vaccine!");
                             return;
                            
                        }
                    }
                }

            }
        }
        */
        
        /*
        //deduct the quantity of the vaccine
        for (OrderItem orderItem : vaccineWorkRequest.getVaccineOrder().getOrderList()) {
            VaccineProduct prod = orderItem.getVaccineProduct();
        ManufactureOrganization manufacureOrg = null;
            for (Organization org : manufacturer.getOrganizationDirectory().getOrganizationList()) {
                if (org instanceof ManufactureOrganization) {
                    manufacureOrg = (ManufactureOrganization) org;
                    
                    prod.setAvailablity(WIDTH);
                    manufacureOrg.getVaccineProductCatalog().
                }
            }
        }
        
        */
        
        
        //change the status of the work request
        
        vaccineWorkRequest.setStatus("Shipped");
        vaccineWorkRequest.setShipdate(new Date());
        
        //put workrequest in the distributor queue
        DistributorOrganization distributorOrg = null;
            for (Organization org : business.getDistributor().getOrganizationDirectory().getOrganizationList()) {
                if (org instanceof DistributorOrganization){
                    distributorOrg = (DistributorOrganization) org;
                    distributorOrg.getWorkQueue().addWorkRequest(vaccineWorkRequest);
                }
            }
            
            JOptionPane.showMessageDialog(null, "Order Sent to Distributor");
        
        


    }//GEN-LAST:event_shipOrderjButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backJButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField orderNumberjTextField;
    private javax.swing.JTable orderParticularsjTable;
    private javax.swing.JButton shipOrderjButton;
    private javax.swing.JTextField totalAmountjTextField;
    // End of variables declaration//GEN-END:variables
}
