/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.Provider;

import Business.Business;
import Business.Enterprise.HospitalEnterprise;
import Business.Order.OrderItem;
import Business.Organization.HospitalOrganization;
import Business.Organization.Organization;
import Business.Vaccine.VaccineProduct;
import Business.WorkQueue.ShippingOrderWorkRequest;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Vaibhav
 */
public class ViewDetailsOfShippedOrderJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ViewDetailsOfShippedOrderJPanel
     */
    private JPanel workContainer;
    private Business business;
    private HospitalEnterprise hospitalEnterprise;
    private HospitalOrganization hospitalOrganization;
    private ShippingOrderWorkRequest request;

    public ViewDetailsOfShippedOrderJPanel(JPanel workContainer, Business business, HospitalEnterprise hospitalEnterprise, HospitalOrganization hospitalOrganization, ShippingOrderWorkRequest request) {
        initComponents();
        this.workContainer = workContainer;
        this.business = business;
        this.hospitalEnterprise = hospitalEnterprise;
        this.hospitalOrganization = hospitalOrganization;
        this.request = request;
        orderNumberjTextField.setText(String.valueOf(request.getVaccineOrder().getOrderNumber()));
        populateOrderTable();

    }

    private void populateOrderTable() {

        int rowCount = orderjTable.getRowCount();
        DefaultTableModel dtm = (DefaultTableModel) orderjTable.getModel();

        for (int i = rowCount - 1; i >= 0; i--) {
            dtm.removeRow(i);
        }

        for (OrderItem oi : request.getShipOrder().getOrderList()) {
            Object[] row = new Object[9];

            row[0] = oi.getVaccineProduct();
            row[1] = oi;
            row[2] = oi.getVaccineProduct().getManufacturerName();
            row[3] = oi.getVaccineProduct().getVaccineId();
            row[4] = oi.getVaccineProduct().getBatchId();

            row[5] = String.valueOf(oi.getVaccineProduct().getMinOperatingTemp() + " - " + oi.getVaccineProduct().getMaxOperatingTemp());
            row[6] = oi.getQuantity();
            row[7] = oi.getVaccineProduct().getManufactureDate();
            row[8] = oi.getVaccineProduct().getDateOfExpiry();

            dtm.addRow(row);

        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        orderNumberjTextField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        orderjTable = new javax.swing.JTable();
        storeVaccinesjButton = new javax.swing.JButton();
        backJButton3 = new javax.swing.JButton();

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Store Shipped Orders");

        jLabel2.setText("Order Number: ");

        orderNumberjTextField.setEnabled(false);

        orderjTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Vaccine Code", "Vaccine Name", "Brand", "Vaccine ID", "Batch ID", "Temp Range", "Quantity", "Manufacture Date", "Date Of Expiry"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, true, false, false, false, false, false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        orderjTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(orderjTable);

        storeVaccinesjButton.setText("Store Vaccines");
        storeVaccinesjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                storeVaccinesjButtonActionPerformed(evt);
            }
        });

        backJButton3.setText("<< Back");
        backJButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(orderNumberjTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 652, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(backJButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(storeVaccinesjButton, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addComponent(orderNumberjTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(storeVaccinesjButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(backJButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(148, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void storeVaccinesjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_storeVaccinesjButtonActionPerformed
        // TODO add your handling code here:
        if (request.getStatus().equalsIgnoreCase("Stored")) {
            JOptionPane.showMessageDialog(null, "Vaccine already stored!");
            return;
        }

        //go through each shipped order item.
        //check if the product ordered is of same batch, if yes, update the quantity of the existing product.
        boolean flag1 = false;
        boolean flag2 = false;
        
        VaccineProduct orderedVaccine = null;
        for (OrderItem oi : request.getShipOrder().getOrderList()) {
            
                orderedVaccine = oi.getVaccineProduct();
                for (Organization org : hospitalEnterprise.getOrganizationDirectory().getOrganizationList()) {
                    
                        if (org instanceof HospitalOrganization) {
                            HospitalOrganization hospOrg = (HospitalOrganization) org;
                            for (VaccineProduct prod : hospOrg.getClinic().getVaccineInventoryClinic()) {

                                if (orderedVaccine.getBatchId().equals(prod.getBatchId()) && orderedVaccine.getVaccineDefinition().getVaccineName().equals(prod.getVaccineDefinition().getVaccineName()) && orderedVaccine.getManufacturerName().equalsIgnoreCase(prod.getManufacturerName())) {
                                    flag1 = true;
                                    flag2 = true;
                                    prod.setAvailablity(prod.getAvailablity() + oi.getQuantity());
                                    
                                }
                            }
                            
                        }
                    }
                
            }
        

        //store it
        if (flag1 == false && flag2 == false) {
            for (OrderItem oi : request.getShipOrder().getOrderList()) {
                for (Organization org : hospitalEnterprise.getOrganizationDirectory().getOrganizationList()) {
                    if (org instanceof HospitalOrganization) {
                        HospitalOrganization hospOrg = (HospitalOrganization) org;
                        VaccineProduct prod = hospOrg.getClinic().addNewVaccine();
                        prod.setAvailablity(oi.getQuantity());
                        prod.setBatchId(oi.getVaccineProduct().getBatchId());
                        prod.setDateOfExpiry(oi.getVaccineProduct().getDateOfExpiry());
                        prod.setManufactureDate(oi.getVaccineProduct().getManufactureDate());
                        prod.setManufacturerName(oi.getVaccineProduct().getManufacturerName());
                        prod.setMaxOperatingTemp(oi.getVaccineProduct().getMaxOperatingTemp());
                        prod.setMinOperatingTemp(oi.getVaccineProduct().getMinOperatingTemp());
                        prod.setVaccineDefinition(oi.getVaccineProduct().getVaccineDefinition());
                        prod.setVaccineId(oi.getVaccineProduct().getVaccineId());
                        prod.setVaccinePrice(oi.getVaccineProduct().getVaccinePrice());

                    }
                }

            }

        }
        //oi.getVaccineProduct().setAvailablity(oi.getQuantity());
        request.setStatus("Stored");

        JOptionPane.showMessageDialog(null, "Vaccine Stored in the Clinic!");


    }//GEN-LAST:event_storeVaccinesjButtonActionPerformed

    private void backJButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButton3ActionPerformed
        // TODO add your handling code here:
        workContainer.remove(this);
        CardLayout layout = (CardLayout) workContainer.getLayout();
        layout.previous(workContainer);
    }//GEN-LAST:event_backJButton3ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backJButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField orderNumberjTextField;
    private javax.swing.JTable orderjTable;
    private javax.swing.JButton storeVaccinesjButton;
    // End of variables declaration//GEN-END:variables
}
